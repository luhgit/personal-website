---
import { getCollection } from "astro:content"
import PageLayout from "@layouts/PageLayout.astro"
import TopLayout from "@layouts/TopLayout.astro"
import BottomLayout from "@layouts/BottomLayout.astro"
import { WORK } from "@consts"

// Load & sort (newest start first)
const collection = await getCollection("work")
collection.sort((a, b) => new Date(b.data.dateStart).getTime() - new Date(a.data.dateStart).getTime())

// Render bodies
const work = await Promise.all(collection.map(async (item) => {
  const { Content } = await item.render()
  return { ...item, Content }
}))

const edu = (await getCollection("education")).sort(
  (a, b) => new Date(b.data.dateEnd).getTime() - new Date(a.data.dateEnd).getTime()
)

function fmtMonthYear(input: Date | string | undefined) {
  if (!input) return "Present"
  if (typeof input === "string") return new Date(input).toLocaleDateString("en-US", { month: "short", year: "numeric" })
  return input.toLocaleDateString("en-US", { month: "short", year: "numeric" })
}

function duration(start: Date | string, end?: Date | string) {
  const s = new Date(start as any), e = end ? new Date(end as any) : new Date()
  const months = (e.getFullYear()-s.getFullYear())*12 + (e.getMonth()-s.getMonth())
  const y = Math.floor(months/12), m = months%12
  return [y?`${y} yr${y>1?'s':''}`:'', m?`${m} mo`:'' ].filter(Boolean).join(" ") || "0 mo"
}

---

<PageLayout title={WORK.TITLE} description={WORK.DESCRIPTION}>
  <TopLayout>
    <div class="animate page-heading">{WORK.TITLE}</div>
    {WORK.DESCRIPTION && <p class="animate opacity-70 mt-2">{WORK.DESCRIPTION}</p>}
    <!-- Optional: Resume button -->
    <!-- <div class="mt-4">
      <a href="/resume/resume_ats.pdf" class="text-sm px-3 py-1.5 rounded border hover:bg-black/5 hover:dark:bg-white/10">
        Download Resume (PDF)
      </a>
    </div> -->
  </TopLayout>

  <BottomLayout>
    <ul>
      {work.map((entry) => (
        <li class="animate border-b border-black/10 dark:border-white/25 mt-4 py-8 first-of-type:mt-0 first-of-type:pt-0 last-of-type:border-none">
          
          <!-- Header: company + role + logo -->
          <div class="flex items-start gap-3">
            {entry.data.companyUrl && (
              <img
                src={`https://www.google.com/s2/favicons?domain=${new URL(entry.data.companyUrl).hostname}&sz=64`}
                alt={`${entry.data.company} favicon`}
                width="28"
                height="28"
                class="mt-0.5 h-7 w-7 rounded-sm border border-black/10 dark:border-white/20
                      bg-white dark:bg-black object-contain"
                loading="lazy"
                decoding="async"
              />
            )}
            <div>
              <div class="text-black dark:text-white font-semibold">
                {entry.data.companyUrl
                  ? <a href={entry.data.companyUrl} target="_blank" rel="noopener">{entry.data.company}</a>
                  : entry.data.company}
              </div>
              <div class="text-sm font-semibold opacity-90">
                {entry.data.role}
              </div>
            </div>
          </div>

          <!-- Meta row -->
          <div class="text-xs md:text-sm uppercase mt-2 mb-4 opacity-70 flex flex-wrap items-center gap-2">
            <span>{fmtMonthYear(entry.data.dateStart)} – {fmtMonthYear(entry.data.dateEnd)}</span>
            <span aria-hidden="true">•</span>
            <span>{duration(entry.data.dateStart, entry.data.dateEnd)}</span>
            {entry.data.location && (<>
              <span aria-hidden="true">•</span>
              <span class="normal-case">{entry.data.location}</span>
            </>)}
          </div>

          <!-- Tags -->
          {entry.data.tags?.length > 0 && (
            <div class="mb-3 flex flex-wrap gap-2">
              {entry.data.tags.map((t: string) => (
                <span class="text-xs px-2 py-0.5 rounded-full border border-black/10 dark:border-white/20 opacity-80">{t}</span>
              ))}
            </div>
          )}

          <!-- Highlights (short bullets) -->
          {entry.data.highlights?.length > 0 && (
            <ul class="prose dark:prose-invert prose-ul:my-2 prose-li:my-1">
              {entry.data.highlights.map((h: string) => <li>{h}</li>)}
            </ul>
          )}

          <!-- Details collapsible (full MD body) -->
          <details class="mt-3 group">
            <summary class="cursor-pointer select-none text-sm opacity-80 hover:opacity-100">
              More details
            </summary>
            <div class="mt-2">
              <article class="prose dark:prose-invert prose-ul:my-2 prose-li:my-1">
                <entry.Content />
              </article>
            </div>
          </details>

        </li>
      ))}
    </ul>

    <!-- EDUCATION SECTION -->
    <section class="animate mt-12">
      <div class="text-xl font-semibold mb-2 text-black dark:text-white">Education</div>
      <ul>
        {edu.map((e) => (
          <li class="border-b border-black/10 dark:border-white/25 py-6 last:border-none">
            <div class="flex flex-col gap-1">
              <div class="text-black dark:text-white font-semibold">
                {e.data.degree}
              </div>
              <div class="opacity-80">
                {e.data.institution}{e.data.location ? ` • ${e.data.location}` : ""}
              </div>
              <div class="text-xs md:text-sm uppercase opacity-70">
                {fmtMonthYear(e.data.dateStart)} - {fmtMonthYear(e.data.dateEnd)}
              </div>
            </div>

            {e.data.highlights?.length > 0 && (
              <ul class="prose dark:prose-invert prose-ul:my-2 prose-li:my-1 mt-3">
                {e.data.highlights.map((h: string) => <li>{h}</li>)}
              </ul>
            )}
          </li>
        ))}
      </ul>
    </section>

  </BottomLayout>
</PageLayout>